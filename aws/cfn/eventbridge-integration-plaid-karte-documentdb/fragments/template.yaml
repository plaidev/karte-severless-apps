AWSTemplateFormatVersion: '2010-09-09'
Description: >
  eventbridge-integration-plaid-karte-documentdb

      
Parameters:
  EventSourceName:
    Type: String
    AllowedPattern: ^aws\.partner\/karte\.io(\/[\.\-_a-z0-9]+){3}$
    MinLength: 1
    MaxLength: 256
    Description: Name of the Amazon EventBridge KARTE Event Source to associate with an Event Bus. For example, aws.partner/karte.io/{AWSAccountID}/{KARTEProjectId}/{AppName}
  ClusterName: 
    Description: Cluster Name
    Type: String
    Default: "karte-documentdb"
  MasterUsername: 
    Description: Master Username
    Type: String
    NoEcho: true
  MasterUserPassword: 
    Description: Master Password
    Type: String
    NoEcho: true
  SecurityGroupIds:
    Description: Amazon MemoryDB Security Group Ids
    Type: CommaDelimitedList
    Default: "sg-XXXX,sg-YYYY"
  SubnetIds:
    Description: Amazon MemoryDB Subnet Ids
    Type: CommaDelimitedList
    Default: "subnet-XXXX,subnet-YYYY"
  SubnetGroupName:
    Description: Amazon MemoryDB DB Subnet Group Name
    Type: String
  DBInstanceClass:
    Description: The compute and memory capacity of the DB instance.
    Type: String
    Default: "db.t3.medium"
  DBName:
    Description: Database name of DocumentDB 
    Type: String
    Default: "mydb"
  CollectionName:
    Description: Collection name of DocumentDB 
    Type: String
    Default: "mycollection"


Resources:
  #############
  #  SNS  #
  #############

  SNSTopic:
    Type: AWS::SNS::Topic

  #############
  #  Lambda  #
  #############
  WriteToDBLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: 
        S3Bucket: "production-karte-cfn-sample-lambda-us-east-1"
        S3Key: "documentdb/src.zip"
      Handler: writeToDB.handler
      Runtime: nodejs14.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Environment:
        Variables:
          db_host: !GetAtt DocumentDBCluster.Endpoint
          db_port: !GetAtt DocumentDBCluster.Port
          db_username: !Ref MasterUsername
          db_password: !Ref MasterUserPassword
          db_db_name: !Ref DBName
          db_collection_name: !Ref CollectionName
      VpcConfig:
        SecurityGroupIds: !Ref SecurityGroupIds
        SubnetIds: !Ref SubnetIds
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonSNSFullAccess"


  #################
  #  EventBridge  #
  #################
  EventBridgeEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Ref EventSourceName
      EventSourceName: !Ref EventSourceName

  EventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: catch-all rule for event bus
      EventBusName: !Ref EventBridgeEventBus
      EventPattern:
        account:
          - !Ref AWS::AccountId
        detail-type:
          - 'KARTE Action'
        detail:
          name:
            - _write_to_db_request
      Name: write_to_db
      State: ENABLED
      Targets:
        - Arn:
            Ref: SNSTopic
          Id: !GetAtt SNSTopic.TopicName

  EventTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sns:Publish'
            Resource: '*'
      Topics:
        - !Ref SNSTopic

  #################
  #  DocumentDB  #
  #################
  DocumentDBCluster:
    Type: 'AWS::DocDB::DBCluster'
    Properties:    
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterUserPassword
      StorageEncrypted: true
      DBSubnetGroupName: !Ref SubnetGroupName
      VpcSecurityGroupIds: !Ref SecurityGroupIds
      DBClusterIdentifier: !Ref ClusterName

  DocumentDBInstance:
    Type: "AWS::DocDB::DBInstance"
    Properties:
      DBClusterIdentifier: !Ref DocumentDBCluster
      DBInstanceClass: !Ref DBInstanceClass
      DBInstanceIdentifier: !Sub ${ClusterName}-instance

Outputs:
  EventBridgeEventBus:
    Description: SaaS Event Bus ARN
    Value: !GetAtt EventBridgeEventBus.Arn
  EventBridgeRule:
    Description: EventBridge Rule ARN
    Value: !GetAtt EventBridgeRule.Arn
  WriteToDBLambdaFunction:
    Description: WriteToDBLambdaFunction ARN
    Value: !GetAtt WriteToDBLambdaFunction.Arn
  SNSTopic:
    Description: SNSTopic TopicName
    Value: !GetAtt SNSTopic.TopicName
  ClusterEndpoint:
    Description: DocumentDB Endpoint URL
    Value: !GetAtt DocumentDBCluster.Endpoint
  ClusterPort:
    Description: DocumentDB Port
    Value: !GetAtt DocumentDBCluster.Port
  ClusterResourceId: 
    Description: DocumentDB ClusterResourceId
    Value: !GetAtt DocumentDBCluster.ClusterResourceId

